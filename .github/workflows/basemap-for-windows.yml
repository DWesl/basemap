name: basemap-for-windows

env:
  PKGDIR: "packages/basemap"

on:
  push:
  workflow_dispatch:

jobs:

  build-geos:
    strategy:
      matrix:
        include:
          - arch: "x64"
            msvc-toolset: "16"
            cmake-version: "3.14.7"
          - arch: "x86"
            msvc-toolset: "16"
            cmake-version: "3.13.2"
          - arch: "x64"
            msvc-toolset: "9"
            cmake-version: "3.14.7"
          - arch: "x86"
            msvc-toolset: "9"
            cmake-version: "3.13.2"
      max-parallel: 4
      fail-fast: false
    runs-on: windows-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Set Python
        uses: actions/setup-python@v2
        with:
          architecture: ${{ matrix.arch }}
          python-version: "3.6"
      -
        name: Set MSVC toolchain (v9)
        run: |
          Invoke-WebRequest ${{ secrets.VS090URL }} -OutFile VCForPython27.msi
          $msi_process = Start-Process "msiexec" -ArgumentList "/i VCForPython27.msi /qn /l*! output.log" -NoNewWindow -PassThru
          $msi_process.WaitForExit()
          if ("${{ matrix.arch }}" -eq "x64") {
              $vcsubdir = "amd64"
              $winsdksubdir = "${{ matrix.arch }}"
          } else {
              $vcsubdir = ""
              $winsdksubdir = ""
          }
          $MSVCROOT = "C:\Users\$env:UserName\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0"
          $VCINSTALLDIR = "$MSVCROOT\VC"
          $WindowsSdkDir = "$MSVCROOT\WinSDK"
          echo VCINSTALLDIR="$VCINSTALLDIR" >> $env:GITHUB_ENV
          echo WindowsSdkDir="$WindowsSdkDir" >> $env:GITHUB_ENV
          echo PATH="$VCINSTALLDIR\Bin\$vcsubdir;$WindowsSdkDir\Bin\$winsdksubdir;$WindowsSdkDir\Bin;$env:PATH" >> $env:GITHUB_ENV
          echo LIB="$VCINSTALLDIR\Lib\$vcsubdir;$WindowsSdkDir\Lib\$winsdksubdir;$env:LIB" >> $env:GITHUB_ENV
          echo LIBPATH="$VCINSTALLDIR\Lib\$vcsubdir;$WindowsSdkDir\Lib\$winsdksubdir;$env:LIBPATH" >> $env:GITHUB_ENV
          echo INCLUDE="$VCINSTALLDIR\Include;$WindowsSdkDir\Include;$env:INCLUDE" >> $env:GITHUB_ENV
        if: matrix.msvc-toolset == '9'
      -
        name: Set MSVC toolchain (v16)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          toolset: ${{ env.msvc-toolset }}
        if: matrix.msvc-toolset == '16'
      -
        name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.9
        with:
          cmake-version: ${{ matrix.cmake-version }}
      -
        name: Build GEOS from source
        run: |
          cd ${{ env.PKGDIR }}
          python -c "import utils; utils.GeosLibrary('3.5.1').build('extern', njobs=16)"
      -
        name: Upload GEOS artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-geos-${{ matrix.arch }}-msvc${{ matrix.msvc-toolset }}
          path: ${{ env.PKGDIR }}/extern

  build:
    strategy:
      matrix:
        arch:
          [
            "x64",
            "x86",
          ]
        python-version:
          [
            "2.7",
            "3.5",
            "3.6",
            "3.7",
            "3.8",
            "3.9",
          ]
      max-parallel: 6
      fail-fast: false
    needs: build-geos
    runs-on: windows-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Set Python
        uses: actions/setup-python@v2
        with:
          architecture: ${{ matrix.arch }}
          python-version: ${{ matrix.python-version }}
      -
        name: Set MSVC toolset version
        run: |
          if ("${{ matrix.python-version }}" -eq "2.7") {
              echo "msvc-toolset=9" >> $env:GITHUB_ENV
          } else {
              echo "msvc-toolset=16" >> $env:GITHUB_ENV
          }
      -
        name: Set MSVC toolchain (v9)
        run: |
          Invoke-WebRequest ${{ secrets.VS090URL }} -OutFile VCForPython27.msi
          $msi_process = Start-Process "msiexec" -ArgumentList "/i VCForPython27.msi /qn /l*! output.log" -NoNewWindow -PassThru
          $msi_process.WaitForExit()
          if ("${{ matrix.arch }}" -eq "x64") {
              $vcsubdir = "amd64"
              $winsdksubdir = "${{ matrix.arch }}"
          } else {
              $vcsubdir = ""
              $winsdksubdir = ""
          }
          $MSVCROOT = "C:\Users\$env:UserName\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0"
          $VCINSTALLDIR = "$MSVCROOT\VC"
          $WindowsSdkDir = "$MSVCROOT\WinSDK"
          echo VCINSTALLDIR="$VCINSTALLDIR" >> $env:GITHUB_ENV
          echo WindowsSdkDir="$WindowsSdkDir" >> $env:GITHUB_ENV
          echo PATH="$VCINSTALLDIR\Bin\$vcsubdir;$WindowsSdkDir\Bin\$winsdksubdir;$WindowsSdkDir\Bin;$env:PATH" >> $env:GITHUB_ENV
          echo LIB="$VCINSTALLDIR\Lib\$vcsubdir;$WindowsSdkDir\Lib\$winsdksubdir;$env:LIB" >> $env:GITHUB_ENV
          echo LIBPATH="$VCINSTALLDIR\Lib\$vcsubdir;$WindowsSdkDir\Lib\$winsdksubdir;$env:LIBPATH" >> $env:GITHUB_ENV
          echo INCLUDE="$VCINSTALLDIR\Include;$WindowsSdkDir\Include;$env:INCLUDE" >> $env:GITHUB_ENV
        if: env.msvc-toolset == '9'
      -
        name: Set MSVC toolchain (v16)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          toolset: ${{ env.msvc-toolset }}
        if: env.msvc-toolset == '16'
      -
        name: Install Python base packages
        run: |
          python -m pip install --upgrade pip setuptools wheel
      -
        name: Generate NumPy headers
        run: |
          if ("${{ matrix.python-version }}" -lt "3.5") {
              Set-Variable -Name "pkgvers" -Value "1.11.3"
          } else {
              Set-Variable -Name "pkgvers" -Value "1.16.6"
          }
          Set-Variable -Name "pkgname" -Value "numpy"
          Set-Variable -Name "pkgcode" -Value "numpy-${pkgvers}"
          Set-Variable -Name "includedir" -Value "numpy/core/include"
          python -m pip download --no-binary=:all: "numpy == ${pkgvers}"
          tar -xf "${pkgcode}.zip"
          rm "${pkgcode}.zip"
          cd "${pkgcode}"
          python setup.py build
          cp -R build/src.*/${includedir}/numpy/*.h ${includedir}/numpy
          cd ..
          cp -R "${pkgcode}/${includedir}/numpy" "${{ env.PKGDIR }}/extern/include/numpy"
          rm -r "${pkgcode}"
      -
        name: Download GEOS artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-geos-${{ matrix.arch }}-msvc${{ env.msvc-toolset }}
          path: ${{ env.PKGDIR }}/extern
      -
        name: Build wheel
        run: |
          cd ${{ env.PKGDIR }}
          $env:GEOS_DIR = "extern"
          $env:NUMPY_INCLUDE_PATH = "extern/include"
          pip install -r requirements-setup.txt
          python setup.py bdist_wheel
      -
        name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist

  upload:
    strategy:
      matrix:
        arch:
          [
            "x64",
            "x86",
          ]
        python-version:
          [
            "2.7",
            "3.5",
            "3.6",
            "3.7",
            "3.8",
            "3.9",
          ]
      max-parallel: 1
    if: startsWith(github.event.ref, 'refs/tags/v')
    needs: build
    runs-on: windows-latest
    environment: Test PyPI
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Set Python
        uses: actions/setup-python@v2
        with:
          architecture: ${{ matrix.arch }}
          python-version: ${{ matrix.python-version }}
      -
        name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-build-${{ matrix.arch }}-${{ matrix.python-version }}
          path: ${{ env.PKGDIR }}/dist
      -
        name: Install requirements
        run: |
          pip install --prefer-binary twine
      -
        name: Upload distributables
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: "${{ secrets.PYPI_TOKEN }}"
          TWINE_REPOSITORY_URL: "${{ secrets.PYPI_REPOSITORY_URL }}"
        run: |
          python -m twine check                                               `
              ${{ env.PKGDIR }}/dist/*-win*.whl
          python -m twine upload --skip-existing                              `
              ${{ env.PKGDIR }}/dist/*-win*.whl
