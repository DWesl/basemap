name: ci-basemap

env:
  PKGDIR: "packages/basemap"

on:
  push:
  workflow_dispatch:

jobs:

  build-geos:
    runs-on: ubuntu-latest
    container: "tinybases/python:3.6-debian-4"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Install CMake 2.8.6
        run: |
          set -e
          . /etc/profile
          cd /usr/bin
          wget https://raw.githubusercontent.com/minos-org/minos-static/master/static-get
          chmod +x static-get
          cd /tmp
          static-get cmake
          cd /
          tar -xf /tmp/cmake-*.tar.gz
          cmake --version
      -
        name: Install GCC toolchain
        run: |
          set -e
          . /etc/profile
          apt-get update
          apt-get install -y gcc g++ make
          gcc --version
          g++ --version
      -
        name: Build GEOS from source
        run: |
          set -e
          . /etc/profile
          cd ${{ env.PKGDIR }}
          export MAKEFLAGS="-j 16"
          python -c "import utils; utils.GeosLibrary('3.3.3').build('extern')"
      -
        name: Upload GEOS artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-geos
          path: ${{ env.PKGDIR }}/extern

  build:
    needs: build-geos
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version:
          [
            "2.7",
            "3.5",
            "3.6",
            "3.7",
            "3.8",
            "3.9",
          ]
      max-parallel: 6
      fail-fast: false
    container: "tinybases/python:${{ matrix.python_version }}-debian-4"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Download GEOS artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-geos
          path: ${{ env.PKGDIR }}/extern
      -
        name: Install GCC toolchain
        run: |
          set -e
          . /etc/profile
          apt-get update
          apt-get install -y gcc g++ make
          gcc --version
          g++ --version
      -
        name: Print environment
        run: |
          set -e
          . /etc/profile
          python -V
      -
        name: Generate NumPy headers
        run: |
          set -e
          . /etc/profile
          case "${{ matrix.python_version }}" in
              2.[67]|3.[0123456])  pkgvers=1.11.3;;
              *)                   pkgvers=1.16.6;;
          esac
          pkgname=numpy
          pkgcode=numpy-${pkgvers}
          wget https://github.com/numpy/${pkgname}/releases/download/v${pkgvers}/${pkgcode}.tar.gz
          tar -xf ${pkgcode}.tar.gz
          rm -f ${pkgcode}.tar.gz
          cd ${pkgcode}
          python setup.py build -j 16
          cp build/src*/numpy/core/include/numpy/*.h numpy/core/include/numpy/
          cd ..
          cp -R ${pkgcode}/numpy/core/include ${{ env.PKGDIR }}/extern
          rm -rf ${pkgcode}
      -
        name: Build wheel
        run: |
          set -e
          . /etc/profile
          cd ${{ env.PKGDIR }}
          export GEOS_DIR=extern
          export NUMPY_INCLUDE_PATH=extern/include
          pip install -r requirements-setup.txt
          python setup.py sdist bdist_wheel
      -
        name: Upload build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-build-${{ matrix.python_version }}
          path: ${{ env.PKGDIR }}/dist

  repair:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version:
          [
            "2.7",
            "3.5",
            "3.6",
            "3.7",
            "3.8",
            "3.9",
          ]
      max-parallel: 6
      fail-fast: false
    container: "tinybases/python:3.6-debian-5"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Download GEOS artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-geos
          path: ${{ env.PKGDIR }}/extern
      -
        name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-build-${{ matrix.python_version }}
          path: ${{ env.PKGDIR }}/dist
      -
        name: Install GCC toolchain
        run: |
          set -e
          . /etc/profile
          apt-get update
          apt-get install -y gcc g++ make
          gcc --version
          g++ --version
      -
        name: Install unzip
        run: |
          set -e
          . /etc/profile
          apt-get update
          apt-get install -y unzip
          gcc --version
          g++ --version
      -
        name: Install patchelf from source
        run: |
          set -e
          . /etc/profile
          pkgvers=0.9
          pkgname=patchelf
          pkgcode=${pkgname}-${pkgvers}
          cd /tmp
          wget https://releases.nixos.org/${pkgname}/${pkgcode}/${pkgcode}.tar.gz
          tar -xf ${pkgcode}.tar.gz
          rm -f ${pkgcode}.tar.gz
          cd ${pkgcode}
          ./configure
          make
          make check
          make install
          cd ..
          rm -rf ${pkgcode}
      -
        name: Print environment
        run: |
          set -e
          . /etc/profile
          python -V
      -
        name: Install auditwheel
        run: |
          set -e
          . /etc/profile
          pip install "auditwheel < 4.0"
      -
        name: Repair wheel
        run: |
          set -e
          . /etc/profile
          cd ${{ env.PKGDIR }}
          export LD_LIBRARY_PATH="$(readlink -f extern/lib)"
          auditwheel repair -w dist --plat manylinux1_x86_64 dist/*.whl
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts-build-${{ matrix.python_version }}
          path: ${{ env.PKGDIR }}/dist

  upload:
    if: startsWith(github.event.ref, 'refs/tags/v')
    needs: repair
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version:
          [
            "2.7",
            "3.5",
            "3.6",
            "3.7",
            "3.8",
            "3.9",
          ]
      max-parallel: 1
    container: "tinybases/python:${{ matrix.python_version }}-debian-5"
    environment: Test PyPI
    steps:
      -
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Download build artifacts
        uses: actions/download-artifact@v1
        with:
          name: artifacts-build-${{ matrix.python_version }}
          path: ${{ env.PKGDIR }}/dist
      -
        name: Print environment
        run: |
          set -e
          . /etc/profile
          python -V
      -
        name: Install requirements
        run: |
          set -e
          . /etc/profile
          pip install --prefer-binary twine
      -
        name: Upload distributables
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: "${{ secrets.PYPI_TOKEN }}"
          TWINE_REPOSITORY_URL: "${{ secrets.PYPI_REPOSITORY_URL }}"
        run: |
          set -e
          . /etc/profile
          python -m twine check                                               \
              ${{ env.PKGDIR }}/dist/*.tar.gz                                 \
              ${{ env.PKGDIR }}/dist/*-manylinux1*.whl
          python -m twine upload --skip-existing                              \
              ${{ env.PKGDIR }}/dist/*.tar.gz                                 \
              ${{ env.PKGDIR }}/dist/*-manylinux1*.whl
